<?php
/**
 * @file
 *    Main functions for bunchball client side JS module. Send events to
 *    bunchball from client side JS.
 */

function bunchball_form_bunchball_entities_admin_form_alter(&$form, &$form_state, $form_id) {
  // get all the content types
  $node_types = node_type_get_names();
  $nitro_ct_enabled = variable_get('bunchball_nitro_admin', array());

  $form['bunchball_nitro'] = array(
    '#type' => 'fieldset',
    '#title' => t('Nitro Javascript'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#weight' => 1,
  );

  $form['submit']['#weight'] = 2;
  $form['#submit'][] = 'bunchball_nitro_admin_form_submit';

  // build form
  foreach ($node_types as $machine => $human) {
    $form['bunchball_entities']['settings']["node_{$machine}"]["node_{$machine}_view_check"] = array(
      '#type' => 'checkbox',
      '#title' => t('View'),
      '#description' => t('Notify the Bunchball service when a user views this content type.'),
      '#default_value' => isset($nitro_ct_enabled[$machine]) ? 1 : 0,
    );
    $form['bunchball_entities']['settings']["node_{$machine}"]["node_{$machine}_view_name"] = array(
      '#type' => 'textfield',
      '#title' => t('Nitro action name'),
      '#description' => t('The machine name used to map this action to your Bunchball Nitro Server.'),
      '#default_value' => isset($nitro_ct_enabled[$machine]) ? $nitro_ct_enabled[$machine] : '',
      '#size' => 60,
      '#maxlength' => 128,
      '#states' => array(
        'invisible' => array(
          ':input[name="checkbox_' . $machine . '"]' => array('checked' => FALSE),
        ),
      ),
    );
  }

  // Youtube element.
  $nitro_youtube_enabled = variable_get('bunchball_nitro_admin_youtube', array());

  $form['bunchball_nitro']['element_youtube'] = array(
    '#type' => 'fieldset',
    '#title' => t('YouTube'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['bunchball_nitro']['element_youtube']['checkbox_youtube'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => isset($nitro_youtube_enabled['start']) &&
      isset($nitro_youtube_enabled['end']) ? 1 : 0,
  );
  $form['bunchball_nitro']['element_youtube']['youtube_start'] = array(
    '#type' => 'textfield',
    '#title' => t('Start action name'),
    '#default_value' => isset($nitro_youtube_enabled['start']) ? $nitro_youtube_enabled['start'] : '',
    '#size' => 60,
    '#maxlength' => 128,
    '#states' => array(
      'invisible' => array(
        ':input[name="checkbox_youtube"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['bunchball_nitro']['element_youtube']['youtube_end'] = array(
    '#type' => 'textfield',
    '#title' => t('End action name'),
    '#default_value' => isset($nitro_youtube_enabled['end']) ? $nitro_youtube_enabled['end'] : '',
    '#size' => 60,
    '#maxlength' => 128,
    '#states' => array(
      'invisible' => array(
        ':input[name="checkbox_youtube"]' => array('checked' => FALSE),
      ),
    ),
  );
}

/**
 * Implement hook_view($node, $view_mode)
 */
function bunchball_nitro_node_view($node, $view_mode, $langcode) {
  // make sure the user is currently viewing in full content mode
  if ($view_mode != 'full') {
    return;
  }

  $nitro_ct_enabled = variable_get('bunchball_nitro_admin', array());

  // the user needs to set their settings..
  if (!isset($nitro_ct_enabled[$node->type])) {
    return;
  }

  drupal_add_js(array(
    'bunchball_nitro' => array(
        'node_id' => $node->nid,
        'node_uid' => $node->uid,
        'node_title' => filter_xss($node->title, array()),
        'node_cat' => $node->type,
        'node_type' => $node->type,
        'node_action' => $nitro_ct_enabled[$node->type],
        )
    ), 'setting');

  _bunchball_nitro_add_content_actions_js();
}

/**
 * Implementation of hook_node_view_alter(&$build)
 */
function bunchball_nitro_node_view_alter(&$build) {
  $build['#post_render'][] = '_bunchball_nitro_node_post_render';
}

/**
 * Function used for post render of the HTML to modify youtube URLs
 */
function _bunchball_nitro_node_post_render($markup, $element) {

  // make sure there is a youtube video in here..
  if (strpos($markup, "feature=oembed") === FALSE) {
    return $markup;
  }

  _bunchball_nitro_add_content_actions_js();

  $nitro_youtube_enabled = variable_get('bunchball_nitro_admin_youtube', array());
  drupal_add_js(array(
    'bunchball_nitro' => array(
      'artist_name' => isset($element['#node']) ? filter_xss($element['#node']->title, array()) : "N/A",
      'artist_cat' =>  isset($element['#node']) ? $element['#node']->type : "N/A",
      'artist_start' => isset($nitro_youtube_enabled['start']) ? $nitro_youtube_enabled['start'] : 'youtube_start',
      'artist_end' => isset($nitro_youtube_enabled['end']) ? $nitro_youtube_enabled['end'] : 'youtube_end',
    )
  ), 'setting');

  // Enable JS API for youtube videos found on the page through the oembed
  // module.
  $markup = str_replace("feature=oembed", "feature=oembed&enablejsapi=1", $markup);
  return $markup;
}

/**
 * Initialize the JavaScript on the page
 */
function _bunchball_nitro_initialize() {
  $nitro_js_url = "http://assets.bunchball.net/scripts/nitro/current/nitro.js";

  // if the nitro_js_url is already in the SESSION variable, then this
  // has already run..
  $current_js_array = drupal_add_js();
  if (isset ($current_js_array[$nitro_js_url])) {
    return;
  }

  // will get the API key from server side
  $api_key = variable_get('bunchball_apikey', '');

  if ($api_key == '') {
    watchdog('bunchball_nitro', 'API Key not set', array());
    return;
  }

  global $user;

  // detect whether the environment is production or debug (sandbox)
  $environment = variable_get('bunchball_environment', 'sandbox');
  if (strlen($environment) == 0) {
    $endpoint_url = 'sandbox';
  }

  // change this so that debug mode is reflected in the environment.
  $in_debug_mode = ($environment == 'sandbox');

  // parse domain from the variables
  $endpoint_url = variable_get('bunchball_production_url', 'http://sandbox.bunchball.net/nitro/json');
  if (strlen($endpoint_url) == 0) {
    $endpoint_url = 'http://sandbox.bunchball.net/nitro/json';
  }

  $parsed_url = parse_url($endpoint_url);

  // default value for the customer subdomain
  $customer_subdomain = 'sandbox';
  if (isset ($parsed_url['host'])) {
    $exploded_domain = explode(".", $parsed_url['host']);

    if (count($exploded_domain) > 2) {
      array_pop($exploded_domain);
      array_pop($exploded_domain);

      $customer_subdomain = implode(".", $exploded_domain);
    }
  }

  // instantiate the variables for the JS
  $server_url = $in_debug_mode ?
      'http://sandbox.bunchball.net/nitro/json' :
      'http://' . $customer_subdomain . '.nitro.bunchball.net/nitro/json/';
  $user_id = $user->uid;
  $timestamp = time();
  $nitro = NitroAPI_Factory::getInstance();
  $signature = $nitro->getSignature();
  $debug = $in_debug_mode ? 'true' : 'false';

  // To include nitro.js, first put the following code into your HTML page as a
  // direct child of the <body> element or after the </body> tag.
  drupal_add_js($nitro_js_url, array(
      'type' => 'external',
      'weight' => -10,
      'scope' => 'footer',
      'group' => JS_LIBRARY,
      'every_page' => TRUE,
  ));

  // Include settings for initializing the Nitro connection on the client side.
  drupal_add_js(array(
    'bunchballNitroConnection' => array(
      'connectionParams' => array(
        'apiKey' => $api_key,
        'server' => $server_url,
        'timeStamp' => $timestamp,
        'signature' => $signature,
        'userId' => $user_id,
        'debug' => $debug,
      ),
    ),
  ), 'setting');

  // Include the javascript file that makes use of the settings above and
  // handles the initialization of the Nitro connection object.
  drupal_add_js(
    drupal_get_path('module', 'bunchball_nitro') . '/bunchball_nitro.connection.js',
    array(
      'type' => 'file',
      'weight' => -9,
      'scope' => 'footer',
      'group' => JS_LIBRARY,
      'every_page' => TRUE,
    )
  );
}

/**
 * Implements hook_init().
 */
function bunchball_nitro_init() {
  _bunchball_nitro_initialize();
  _bunchball_nitro_add_notification_js();
  _bunchball_nitro_add_nml_js();
}

function _bunchball_nitro_add_content_actions_js() {
  drupal_add_js(
    drupal_get_path('module', 'bunchball_nitro') . '/bunchball_nitro.content.js',
    array(
      'type' => 'file',
      'scope' => 'footer',
      'weight' => 10,
    )
  );
}

function _bunchball_nitro_add_notification_js() {
  drupal_add_js(array(
    'bunchball_nitro_notification' => array(
      'notificationInterval' => variable_get('bunchball_nitro_notification_interval', 10000),
    )
  ), 'setting');

  drupal_add_js(
    drupal_get_path('module', 'bunchball_nitro') . '/bunchball_nitro.notification.js',
    array(
      'type' => 'file',
      'scope' => 'footer',
      'group' => JS_LIBRARY,
      'weight' => 1,
      'every_page' => TRUE,
    )
  );
}

/**
 * Implements hook_rdf_namespaces().
 *
 * Enables usage of NML (Nitro Markup Language) by adding the nitro namespace.
 */
function bunchball_nitro_rdf_namespaces() {
  return array(
    'nitro' => 'http://www.bunchball.com/nitro',
  );
}


function _bunchball_nitro_add_nml_js() {
  drupal_add_js(
    drupal_get_path('module', 'bunchball_nitro') . '/bunchball_nitro.nml.js',
    array(
      'type' => 'file',
      'scope' => 'footer',
      'group' => JS_LIBRARY,
      'weight' => 0,
      'every_page' => TRUE,
    )
  );
}

/**
 * Submit callback for admin form.
 *
 * @param $form
 * @param $form_state
 */
function bunchball_nitro_admin_form_submit($form, &$form_state) {
  if (isset($form_state['values']['notification_interval']) && $form_state['values']['notification_interval']) {
    $interval = $form_state['values']['notification_interval'];
    variable_set('bunchball_nitro_notification_interval', $interval);
  }

  $action_names = array();

  // check to see which elements are set for action name tracking
  $node_types = node_type_get_names();
  foreach ($node_types as $machine => $human) {
    if($form_state['values']['bunchball_entities']['settings']["node_{$machine}"]["node_{$machine}_view_check"] > 0 
        && strlen($form_state['values']['bunchball_entities']['settings']["node_{$machine}"]["node_{$machine}_view_name"]) > 0) {
      $action_names[$machine] = $form_state['values']['bunchball_entities']['settings']["node_{$machine}"]["node_{$machine}_view_name"];
    }
  }
  variable_set('bunchball_nitro_admin', $action_names);

  variable_del('bunchball_nitro_admin_youtube');
  if ($form_state['values']['checkbox_youtube'] > 0 && strlen($form_state['values']['youtube_start']) > 0 && strlen($form_state['values']['youtube_end']) > 0) {
    $youtube = array();
    $youtube['start'] = $form_state['values']['youtube_start'];
    $youtube['end'] = $form_state['values']['youtube_end'];
    variable_set('bunchball_nitro_admin_youtube', $youtube);
  }

}
